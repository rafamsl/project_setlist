from flask import Flask, redirect, request, session, jsonify, render_template
import requests
import os
from urllib.parse import urlencode
from bs4 import BeautifulSoup
from dotenv import load_dotenv  # Add this import

load_dotenv()  # Load environment variables from .env

app = Flask(__name__)
app.secret_key = os.urandom(24)  # Secret key for session handling

# Spotify API credentials
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
REDIRECT_URI = os.getenv("REDIRECT_URI")

# Spotify endpoints
SPOTIFY_AUTH_URL = "https://accounts.spotify.com/authorize"
SPOTIFY_TOKEN_URL = "https://accounts.spotify.com/api/token"
SPOTIFY_API_BASE_URL = "https://api.spotify.com/v1"

# Permissions
SCOPE = "playlist-modify-public playlist-modify-private"


def get_song_list(url):
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Failed to fetch the page. Status code: {response.status_code}")
        return []
    soup = BeautifulSoup(response.text, 'html.parser')
    songs = soup.select('.songPart a')
    song_list = [song.text.strip() for song in songs if song.text.strip()]
    return song_list


def create_playlist(access_token, name):
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    user_profile_url = f"{SPOTIFY_API_BASE_URL}/me"
    user_response = requests.get(user_profile_url, headers=headers)

    if user_response.status_code != 200:
        return None

    user_id = user_response.json().get("id")
    playlist_url = f"{SPOTIFY_API_BASE_URL}/users/{user_id}/playlists"
    playlist_data = {
        "name": name,
        "description": "Generated by Setlist.fm",
        "public": False
    }
    response = requests.post(playlist_url, headers=headers, json=playlist_data)
    if response.status_code != 201:
        return None

    return response.json()


def add_songs_to_playlist(access_token, playlist_id, songs):
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    search_url = f"{SPOTIFY_API_BASE_URL}/search"
    track_uris = []

    for song in songs:
        params = {
            "q": song,
            "type": "track",
            "limit": 1
        }
        response = requests.get(search_url, headers=headers, params=params)
        if response.status_code == 200:
            tracks = response.json().get("tracks", {}).get("items", [])
            if tracks:
                track_uris.append(tracks[0]["uri"])

    if not track_uris:
        return False

    add_url = f"{SPOTIFY_API_BASE_URL}/playlists/{playlist_id}/tracks"
    add_response = requests.post(add_url, headers=headers, json={"uris": track_uris})
    return add_response.status_code == 201


@app.route("/", methods=["GET"])
def home():
    return render_template("index.html")


@app.route("/login", methods=["GET"])
def login():
    # If the user arrived here without a next set, default to your home or parse-setlist
    if 'next' not in session:
        session['next'] = "/"

    auth_query = {
        "response_type": "code",
        "client_id": CLIENT_ID,
        "scope": SCOPE,
        "redirect_uri": REDIRECT_URI
    }
    url_args = urlencode(auth_query)
    auth_url = f"{SPOTIFY_AUTH_URL}?{url_args}"
    return redirect(auth_url)


@app.route("/callback", methods=["GET"])
def callback():
    code = request.args.get("code")
    if not code:
        return "Authorization failed. Please try again."

    token_data = {
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": REDIRECT_URI,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET
    }

    response = requests.post(SPOTIFY_TOKEN_URL, data=token_data)
    if response.status_code != 200:
        return f"Failed to retrieve access token: {response.json()}"

    token_info = response.json()
    session['access_token'] = token_info.get("access_token")
    session['refresh_token'] = token_info.get("refresh_token")

    # Retrieve the route where the user wanted to go
    next_route = session.get('next', '/')
    # Clear it out or leave it, your choice
    session.pop('next', None)

    # Now redirect them there
    return redirect(next_route)


@app.route("/parse-setlist", methods=["GET", "POST"])
def parse_setlist():
    if request.method == "GET":
        return render_template("parse_setlist.html")

    elif request.method == "POST":
        setlist_url = request.form.get("setlist_url")
        if not setlist_url:
            return "No URL provided."

        try:
            songs = get_song_list(setlist_url)
            if not songs:
                return "No songs found in the provided URL. Please check the URL."

            session['songs'] = songs
            return render_template("confirm_songs.html", songs=songs)

        except Exception as e:
            return f"An error occurred while parsing the setlist: {str(e)}"


@app.route("/create-playlist", methods=["GET", "POST"])
def create_playlist_route():
    songs = session.get('songs', [])
    if request.method == "GET":
        playlist_name = session.get('playlist_name')
    else:
        playlist_name = request.form.get("playlist_name")
        session['playlist_name'] = playlist_name
    
    access_token = session.get('access_token')
    if not access_token:
        # Force user to login if they aren't already
        session['next'] = "/create-playlist"
        return redirect("/login")

    playlist = create_playlist(access_token, playlist_name)
    if not playlist:
        return "Failed to create playlist. Please try again."

    playlist_id = playlist.get("id")
    playlist_url = playlist.get("external_urls", {}).get("spotify")

    if not add_songs_to_playlist(access_token, playlist_id, songs):
        return "Failed to add songs to the playlist."

    return render_template("create_playlist.html", playlist_url=playlist_url)

    
@app.route("/status", methods=["GET"])
def status():
    access_token = session.get('access_token')
    if not access_token:
        return jsonify({"status": "Not connected to Spotify"})

    return jsonify({"status": "Connected to Spotify", "access_token": access_token})


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)